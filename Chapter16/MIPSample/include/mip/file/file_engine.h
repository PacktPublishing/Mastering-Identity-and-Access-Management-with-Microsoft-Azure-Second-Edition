/*
 *
 * Copyright (c) Microsoft Corporation.
 * All rights reserved.
 *
 * This code is licensed under the MIT License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files(the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions :
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#ifndef API_MIP_FILE_FILE_ENGINE_H_
#define API_MIP_FILE_FILE_ENGINE_H_

#include <memory>
#include <string>
#include <vector>

#include "mip/file/file_handler.h"
#include "mip/upe/execution_state.h"
#include "mip/upe/label.h"

namespace mip {

/**
 * @brief This class provides an interface for all  engine functions.
 */
class FileEngine {
public:

  class Settings {
  public:
    /**
     * @brief FileEngine::Settings constructor for loading an existing engine.
     * 
     * @param engineId Set it to the unique engine ID generated by AddEngineAsync.
     * @param clientData customizable client data that can be stored with the engine when unloaded, can be retrieved from
     * a loaded engine.
     * @param locale engine localizable output will be provided in this locale.
     */
    Settings(
        const std::string& engineId,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mEngineId(engineId),
        mClientData(clientData),
        mLocale(locale) {
    }

    /**
     * @brief FileProfile::Settings constructor for creating a new engine.
     * 
     * @param identity Identity info of the user associated with the new engine.
     * @param clientData customizable client data that can be stored with the engine when unloaded, can be retrieved from
     * a loaded engine.
     * @param locale engine localizable output will be provided in this locale.
     */
    Settings(
        const Identity& identity,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mIdentity(identity),
        mClientData(clientData),
        mLocale(locale) {
    }

    /**
     * @brief Returns the engine ID.
     */
    const std::string& GetEngineId() const { return mEngineId; }

    /**
     * @brief Returns the engine Identity.
     */
    const Identity& GetIdentity() const { return mIdentity; }

    /**
     * @brief Sets the engine identity.
     */
    void SetIdentity(const Identity& identity) { mIdentity = identity; }

    /**
     * @brief Returns the engine client data.
     */
    const std::string& GetClientData() const { return mClientData; }

    /**
     * @brief Return the engine locale.
     */
    const std::string& GetLocale() const { return mLocale; }

    /**
     * @brief Sets a list of name/value pairs used for testing and experimentation.
     */
    void SetCustomSettings(const std::vector<std::pair<std::string, std::string>>& value) { mCustomSettings = value; }

    /**
     * @brief Gets a list of name/value pairs used for testing and experimentation.
     */
    const std::vector<std::pair<std::string, std::string>>& GetCustomSettings() const { return mCustomSettings; }

    /**
    * @brief Sets the engine session ID.
    */
    void SetSessionId(const std::string& sessionId) {
      mSessionId = sessionId;
    }

    /**
    * @brief Return the engine session ID.
    */
    const std::string& GetSessionId() const {
      return mSessionId;
    }

    /**
    *@brief Sets the protection cloud endpoint base url, used to specify cloud boundary
      *
      * @param protectionCloudEndpointBaseUrl Base url associated with protection endpoints
      */
    void SetProtectionCloudEndpointBaseUrl(const std::string& protectionCloudEndpointBaseUrl) {
      mProtectionCloudEndpointBaseUrl = protectionCloudEndpointBaseUrl;
    }

    /**
    * @brief Gets the cloudEndpointBaseUrl
    *
    * @return Base url associated with protection endpoints
    */
    const std::string& GetProtectionCloudEndpointBaseUrl() const {
      return mProtectionCloudEndpointBaseUrl;
    }

    /**
    * @brief Sets protection only engine indicator - no policy/label.
    */
    void SetProtectionOnlyEngine(const bool protectionOnly) {
      mProtectionOnlyEngine = protectionOnly;
    }

    /**
    * @brief Return protection only engine indicator - no policy/label.
    */
    const bool IsProtectionOnlyEngine() const {
      return mProtectionOnlyEngine;
    }

  private:
    std::string mEngineId;
    Identity mIdentity;
    std::string mClientData;
    std::vector<std::pair<std::string, std::string>> mCustomSettings;
    std::string mProtectionCloudEndpointBaseUrl;
    std::string mLocale;
    std::string mSessionId;
    bool mProtectionOnlyEngine = false;
  };

/** @cond DOXYGEN_HIDE */
  virtual ~FileEngine() {}
  /** @endcond */

  /**
   * @brief Returns the engine settings.
   */
  virtual const Settings& GetSettings() const = 0;

  /**
   * @brief Returns a list of sensitivity labels.
   */
  virtual const std::vector<std::shared_ptr<Label>>& ListSensitivityLabels() = 0;

  /**
   * @brief Provide a url for looking up more information about the policy/labels.
   * 
   * @return a url in string format.
   */
  virtual const std::string& GetMoreInfoUrl() const = 0;
  
  /**
   * @brief Checks if the policy dictates that a document must be labeled.
   * 
   * @return true if labeling is mandatory, else false. 
   */
  virtual bool IsLabelingRequired() const = 0; 

  /**
   * @brief Starts creating a file handler for given file path.
   * 
   * @param The file to open. The path must include the file name and, if one exists, the file name extension.
   * @param contentIdentifier a human-readable identifier for the content.
   *    example for a file: "C:\mip-sdk-for-cpp\files\audit.docx" [path\filename]
   *    example for an email: "RE: Audit design:user1@contoso.com" [Subject:Sender]
   * @param contentState The state of the content while the application is interacting with it.
   * @param bool representing whether audit discovery is enabled or not.
   * @param A class implementing the FileHandler::Observer interface.
   * @param context Client context that will be opaquely passed back to the observer.
   */
  virtual void CreateFileHandlerAsync(
      const std::string& inputFilePath,
      const std::string& contentIdentifier,
      const ContentState contentState,
      bool isAuditDiscoveryEnabled,
      const std::shared_ptr<FileHandler::Observer>& fileHandlerObserver,
      const std::shared_ptr<void>& context) = 0;

  /**
   * @brief Starts creating a file handler for given file stream.
   * 
   * @param inputStream A stream containing the file data.
   * @param inputFilePath The path to the file. The path must include the file name and, if one exists, the file name extension. 
   * @param contentIdentifier a human-readable identifier for the content.
   *    example for a file: "C:\mip-sdk-for-cpp\files\audit.docx" [path\filename]
   *    example for an email: "RE: Audit design:user1@contoso.com" [Subject:Sender]
   * @param contentState The state of the content while the application is interacting with it.
   * @param bool representing whether audit discovery is enabled or not.
   * @param fileHandlerObserver A class implementing the FileHandler::Observer interface.
   * @param context Client context that will be opaquely passed back to the observer.
   */
  virtual void CreateFileHandlerAsync(
      const std::shared_ptr<Stream>& inputStream,
      const std::string& inputFilePath,
      const std::string& contentIdentifier,
      const mip::ContentState contentState,
      bool isAuditDiscoveryEnabled,
      const std::shared_ptr<FileHandler::Observer>& fileHandlerObserver,
      const std::shared_ptr<void>& context) = 0;

  /**
   * @brief Logs an application specific event to the audit pipeline
   *
   * @param level a description of the log level : Info/Error/Warning
   * @param eventType a description of the type of event
   * @param eventData the data associated with the event
   */
  virtual void SendApplicationAuditEvent(
      const std::string& level,
      const std::string& eventType,
      const std::string& eventData) = 0;

protected:
/** @cond DOXYGEN_HIDE */
  FileEngine() {}
  /** @endcond */
};

} // namespace mip

#endif  // API_MIP_FILE_FILE_ENGINE_H_
